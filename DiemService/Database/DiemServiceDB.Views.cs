//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(DiemService.Database.DiemServiceDB),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets5a688c1b06ed75ad6b8905343771ad62587ff0cc3a60c8e78ad0c57f6748b4c5))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets5a688c1b06ed75ad6b8905343771ad62587ff0cc3a60c8e78ad0c57f6748b4c5 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "5a688c1b06ed75ad6b8905343771ad62587ff0cc3a60c8e78ad0c57f6748b4c5"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Address")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.AdminAvio")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.AvioCompany")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Location")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Flight")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.FlightReservation")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Review")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.AdminRent")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.RentACar")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Vehicle")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.RegisteredUser")
            {
                return GetView11();
            }

            if (extentName == "DiemServiceDB.AddressDbSet")
            {
                return GetView12();
            }

            if (extentName == "DiemServiceDB.RentACar_Holdings")
            {
                return GetView13();
            }

            if (extentName == "DiemServiceDB.AdminAvioDbSet")
            {
                return GetView14();
            }

            if (extentName == "DiemServiceDB.AvioCompanyDbSet")
            {
                return GetView15();
            }

            if (extentName == "DiemServiceDB.AvioCompany_Address")
            {
                return GetView16();
            }

            if (extentName == "DiemServiceDB.AvioCompany_Owner")
            {
                return GetView17();
            }

            if (extentName == "DiemServiceDB.AdminAvio_OwnedAvioCompanies")
            {
                return GetView18();
            }

            if (extentName == "DiemServiceDB.LocationDbSet")
            {
                return GetView19();
            }

            if (extentName == "DiemServiceDB.AvioCompany_Destinations")
            {
                return GetView20();
            }

            if (extentName == "DiemServiceDB.Flight_Transits")
            {
                return GetView21();
            }

            if (extentName == "DiemServiceDB.FlightDbSet")
            {
                return GetView22();
            }

            if (extentName == "DiemServiceDB.Flight_From_Location")
            {
                return GetView23();
            }

            if (extentName == "DiemServiceDB.Flight_Provider")
            {
                return GetView24();
            }

            if (extentName == "DiemServiceDB.Flight_To_Location")
            {
                return GetView25();
            }

            if (extentName == "DiemServiceDB.FlightReservationDbSet")
            {
                return GetView26();
            }

            if (extentName == "DiemServiceDB.FlightReservation_Flight")
            {
                return GetView27();
            }

            if (extentName == "DiemServiceDB.FlightReservation_Invited_By")
            {
                return GetView28();
            }

            if (extentName == "DiemServiceDB.FlightReservation_Review")
            {
                return GetView29();
            }

            if (extentName == "DiemServiceDB.FlightReservation_User")
            {
                return GetView30();
            }

            if (extentName == "DiemServiceDB.RegisteredUser_FlightReservations")
            {
                return GetView31();
            }

            if (extentName == "DiemServiceDB.UserDbSet")
            {
                return GetView32();
            }

            if (extentName == "DiemServiceDB.User_FriendRequestsSent")
            {
                return GetView33();
            }

            if (extentName == "DiemServiceDB.User_Friends")
            {
                return GetView34();
            }

            if (extentName == "DiemServiceDB.User_PendingFriends")
            {
                return GetView35();
            }

            if (extentName == "DiemServiceDB.ReviewDbSet")
            {
                return GetView36();
            }

            if (extentName == "DiemServiceDB.Review_User")
            {
                return GetView37();
            }

            if (extentName == "DiemServiceDB.AdminRentDbSet")
            {
                return GetView38();
            }

            if (extentName == "DiemServiceDB.RentACarDbSet")
            {
                return GetView39();
            }

            if (extentName == "DiemServiceDB.RentACar_Address")
            {
                return GetView40();
            }

            if (extentName == "DiemServiceDB.RentACar_Owner")
            {
                return GetView41();
            }

            if (extentName == "DiemServiceDB.AdminRent_OwnedRentServices")
            {
                return GetView42();
            }

            if (extentName == "DiemServiceDB.VehicleDbSet")
            {
                return GetView43();
            }

            if (extentName == "DiemServiceDB.Vehicle_Location")
            {
                return GetView44();
            }

            if (extentName == "DiemServiceDB.RentACar_Vehicles")
            {
                return GetView45();
            }

            if (extentName == "DiemServiceDB.RegisteredUserDbSet")
            {
                return GetView46();
            }

            if (extentName == "CodeFirstDatabase.Admin")
            {
                return GetView47();
            }

            if (extentName == "DiemServiceDB.AdminDbSet")
            {
                return GetView48();
            }

            if (extentName == "CodeFirstDatabase.TempUser")
            {
                return GetView49();
            }

            if (extentName == "DiemServiceDB.TempUserDbSet")
            {
                return GetView50();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Address
        [CodeFirstDatabaseSchema.Address](T3.Address_Id, T3.Address_State, T3.Address_City, T3.Address_Street, T3.[Address.Street_num], T3.[Address.Postal_code], T3.[Address.RentACar_Id])
    FROM (
        SELECT T1.Address_Id, T1.Address_State, T1.Address_City, T1.Address_Street, T1.[Address.Street_num], T1.[Address.Postal_code], T2.[Address.RentACar_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Address_Id, 
                T.State AS Address_State, 
                T.City AS Address_City, 
                T.Street AS Address_Street, 
                T.Street_num AS [Address.Street_num], 
                T.Postal_code AS [Address.Postal_code], 
                True AS _from0
            FROM DiemServiceDB.AddressDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.RentACar_Holdings_Target).Id AS Address_Id, 
                Key(T.RentACar_Holdings_Source).Id AS [Address.RentACar_Id], 
                True AS _from1
            FROM DiemServiceDB.RentACar_Holdings AS T) AS T2
            ON T1.Address_Id = T2.Address_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AdminAvio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminAvio
        [CodeFirstDatabaseSchema.AdminAvio](T1.AdminAvio_Id)
    FROM (
        SELECT 
            T.Id AS AdminAvio_Id, 
            True AS _from0
        FROM DiemServiceDB.AdminAvioDbSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AvioCompany.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvioCompany
        [CodeFirstDatabaseSchema.AvioCompany](T5.AvioCompany_Id, T5.AvioCompany_Name, T5.[AvioCompany.Promo_description], T5.[AvioCompany.Average_Rating], T5.AvioCompany_Logo, T5.[AvioCompany.Address_Id], T5.[AvioCompany.Owner_Id], T5.[AvioCompany.AdminAvio_Id])
    FROM (
        SELECT T1.AvioCompany_Id, T1.AvioCompany_Name, T1.[AvioCompany.Promo_description], T1.[AvioCompany.Average_Rating], T1.AvioCompany_Logo, T2.[AvioCompany.Address_Id], T4.[AvioCompany.Owner_Id], T3.[AvioCompany.AdminAvio_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS AvioCompany_Id, 
                T.Name AS AvioCompany_Name, 
                T.Promo_description AS [AvioCompany.Promo_description], 
                T.Average_Rating AS [AvioCompany.Average_Rating], 
                T.Logo AS AvioCompany_Logo, 
                True AS _from0
            FROM DiemServiceDB.AvioCompanyDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AvioCompany_Address_Source).Id AS AvioCompany_Id, 
                Key(T.AvioCompany_Address_Target).Id AS [AvioCompany.Address_Id], 
                True AS _from1
            FROM DiemServiceDB.AvioCompany_Address AS T) AS T2
            ON T1.AvioCompany_Id = T2.AvioCompany_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AdminAvio_OwnedAvioCompanies_Target).Id AS AvioCompany_Id, 
                Key(T.AdminAvio_OwnedAvioCompanies_Source).Id AS [AvioCompany.AdminAvio_Id], 
                True AS _from3
            FROM DiemServiceDB.AdminAvio_OwnedAvioCompanies AS T) AS T3
            ON T1.AvioCompany_Id = T3.AvioCompany_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AvioCompany_Owner_Source).Id AS AvioCompany_Id, 
                Key(T.AvioCompany_Owner_Target).Id AS [AvioCompany.Owner_Id], 
                True AS _from2
            FROM DiemServiceDB.AvioCompany_Owner AS T) AS T4
            ON T1.AvioCompany_Id = T4.AvioCompany_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Location
        [CodeFirstDatabaseSchema.Location](T4.Location_Id, T4.Location_State, T4.Location_City, T4.[Location.AvioCompany_Id], T4.[Location.Flight_Id])
    FROM (
        SELECT T1.Location_Id, T1.Location_State, T1.Location_City, T2.[Location.AvioCompany_Id], T3.[Location.Flight_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Id AS Location_Id, 
                T.State AS Location_State, 
                T.City AS Location_City, 
                True AS _from0
            FROM DiemServiceDB.LocationDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AvioCompany_Destinations_Target).Id AS Location_Id, 
                Key(T.AvioCompany_Destinations_Source).Id AS [Location.AvioCompany_Id], 
                True AS _from1
            FROM DiemServiceDB.AvioCompany_Destinations AS T) AS T2
            ON T1.Location_Id = T2.Location_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Flight_Transits_Target).Id AS Location_Id, 
                Key(T.Flight_Transits_Source).Id AS [Location.Flight_Id], 
                True AS _from2
            FROM DiemServiceDB.Flight_Transits AS T) AS T3
            ON T1.Location_Id = T3.Location_Id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Flight.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Flight
        [CodeFirstDatabaseSchema.Flight](T5.Flight_Id, T5.[Flight.Price_Value], T5.[Flight.Price_Currency], T5.[Flight.Flight_Departure_Time], T5.[Flight.Flight_Arrival_Time], T5.[Flight.Flight_Duration], T5.Flight_Seats, T5.[Flight.Flight_Distance], T5.Flight_FlightClass, T5.Flight_DiscountedPrice, T5.[Flight.From_Location_Id], T5.[Flight.Provider_Id], T5.[Flight.To_Location_Id])
    FROM (
        SELECT T1.Flight_Id, T1.[Flight.Price_Value], T1.[Flight.Price_Currency], T1.[Flight.Flight_Departure_Time], T1.[Flight.Flight_Arrival_Time], T1.[Flight.Flight_Duration], T1.Flight_Seats, T1.[Flight.Flight_Distance], T1.Flight_FlightClass, T1.Flight_DiscountedPrice, T2.[Flight.From_Location_Id], T4.[Flight.Provider_Id], T3.[Flight.To_Location_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS Flight_Id, 
                T.Price.[Value] AS [Flight.Price_Value], 
                CAST(T.Price.Currency AS [Edm.Int32]) AS [Flight.Price_Currency], 
                T.Flight_Departure_Time AS [Flight.Flight_Departure_Time], 
                T.Flight_Arrival_Time AS [Flight.Flight_Arrival_Time], 
                T.Flight_Duration AS [Flight.Flight_Duration], 
                T.Seats AS Flight_Seats, 
                T.Flight_Distance AS [Flight.Flight_Distance], 
                CAST(T.FlightClass AS [Edm.Int32]) AS Flight_FlightClass, 
                T.DiscountedPrice AS Flight_DiscountedPrice, 
                True AS _from0
            FROM DiemServiceDB.FlightDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Flight_From_Location_Source).Id AS Flight_Id, 
                Key(T.Flight_From_Location_Target).Id AS [Flight.From_Location_Id], 
                True AS _from1
            FROM DiemServiceDB.Flight_From_Location AS T) AS T2
            ON T1.Flight_Id = T2.Flight_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Flight_To_Location_Source).Id AS Flight_Id, 
                Key(T.Flight_To_Location_Target).Id AS [Flight.To_Location_Id], 
                True AS _from3
            FROM DiemServiceDB.Flight_To_Location AS T) AS T3
            ON T1.Flight_Id = T3.Flight_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Flight_Provider_Source).Id AS Flight_Id, 
                Key(T.Flight_Provider_Target).Id AS [Flight.Provider_Id], 
                True AS _from2
            FROM DiemServiceDB.Flight_Provider AS T) AS T4
            ON T1.Flight_Id = T4.Flight_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FlightReservation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservation
        [CodeFirstDatabaseSchema.FlightReservation](T7.FlightReservation_Id, T7.FlightReservation_Name, T7.FlightReservation_LastName, T7.[FlightReservation.Seat_Reserved], T7.[FlightReservation.Passport_Number], T7.FlightReservation_Cancelled, T7.[FlightReservation.Flight_Id], T7.[FlightReservation.Invited_By_Id], T7.[FlightReservation.Review_Id], T7.[FlightReservation.User_Id], T7.[FlightReservation.RegisteredUser_Id])
    FROM (
        SELECT T1.FlightReservation_Id, T1.FlightReservation_Name, T1.FlightReservation_LastName, T1.[FlightReservation.Seat_Reserved], T1.[FlightReservation.Passport_Number], T1.FlightReservation_Cancelled, T2.[FlightReservation.Flight_Id], T6.[FlightReservation.Invited_By_Id], T4.[FlightReservation.Review_Id], T5.[FlightReservation.User_Id], T3.[FlightReservation.RegisteredUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T6._from2 AND T6._from2 IS NOT NULL) AS _from2, (T4._from3 AND T4._from3 IS NOT NULL) AS _from3, (T5._from4 AND T5._from4 IS NOT NULL) AS _from4, (T3._from5 AND T3._from5 IS NOT NULL) AS _from5
        FROM  (
            SELECT 
                T.Id AS FlightReservation_Id, 
                T.Name AS FlightReservation_Name, 
                T.LastName AS FlightReservation_LastName, 
                T.Seat_Reserved AS [FlightReservation.Seat_Reserved], 
                T.Passport_Number AS [FlightReservation.Passport_Number], 
                T.Cancelled AS FlightReservation_Cancelled, 
                True AS _from0
            FROM DiemServiceDB.FlightReservationDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FlightReservation_Flight_Source).Id AS FlightReservation_Id, 
                Key(T.FlightReservation_Flight_Target).Id AS [FlightReservation.Flight_Id], 
                True AS _from1
            FROM DiemServiceDB.FlightReservation_Flight AS T) AS T2
            ON T1.FlightReservation_Id = T2.FlightReservation_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.RegisteredUser_FlightReservations_Target).Id AS FlightReservation_Id, 
                Key(T.RegisteredUser_FlightReservations_Source).Id AS [FlightReservation.RegisteredUser_Id], 
                True AS _from5
            FROM DiemServiceDB.RegisteredUser_FlightReservations AS T) AS T3
            ON T1.FlightReservation_Id = T3.FlightReservation_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FlightReservation_Review_Source).Id AS FlightReservation_Id, 
                Key(T.FlightReservation_Review_Target).Id AS [FlightReservation.Review_Id], 
                True AS _from3
            FROM DiemServiceDB.FlightReservation_Review AS T) AS T4
            ON T1.FlightReservation_Id = T4.FlightReservation_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FlightReservation_User_Source).Id AS FlightReservation_Id, 
                Key(T.FlightReservation_User_Target).Id AS [FlightReservation.User_Id], 
                True AS _from4
            FROM DiemServiceDB.FlightReservation_User AS T) AS T5
            ON T1.FlightReservation_Id = T5.FlightReservation_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FlightReservation_Invited_By_Source).Id AS FlightReservation_Id, 
                Key(T.FlightReservation_Invited_By_Target).Id AS [FlightReservation.Invited_By_Id], 
                True AS _from2
            FROM DiemServiceDB.FlightReservation_Invited_By AS T) AS T6
            ON T1.FlightReservation_Id = T6.FlightReservation_Id
    ) AS T7");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T5.User_Id, T5.User_Name, T5.User_LastName, T5.User_Username, T5.User_Hash, T5.User_Role, T5.User_UlogaID, T5.User_Email, T5.[User.User_Id], T5.[User.User_Id1], T5.[User.User_Id2])
    FROM (
        SELECT T1.User_Id, T1.User_Name, T1.User_LastName, T1.User_Username, T1.User_Hash, T1.User_Role, T1.User_UlogaID, T1.User_Email, T2.[User.User_Id], T4.[User.User_Id1], T3.[User.User_Id2], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS User_Id, 
                T.Name AS User_Name, 
                T.LastName AS User_LastName, 
                T.Username AS User_Username, 
                T.Hash AS User_Hash, 
                CAST(T.Role AS [Edm.Int32]) AS User_Role, 
                T.UlogaID AS User_UlogaID, 
                T.Email AS User_Email, 
                True AS _from0
            FROM DiemServiceDB.UserDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.User_FriendRequestsSent_Target).Id AS User_Id, 
                Key(T.User_FriendRequestsSent_Source).Id AS [User.User_Id], 
                True AS _from1
            FROM DiemServiceDB.User_FriendRequestsSent AS T) AS T2
            ON T1.User_Id = T2.User_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.User_PendingFriends_Target).Id AS User_Id, 
                Key(T.User_PendingFriends_Source).Id AS [User.User_Id2], 
                True AS _from3
            FROM DiemServiceDB.User_PendingFriends AS T) AS T3
            ON T1.User_Id = T3.User_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.User_Friends_Target).Id AS User_Id, 
                Key(T.User_Friends_Source).Id AS [User.User_Id1], 
                True AS _from2
            FROM DiemServiceDB.User_Friends AS T) AS T4
            ON T1.User_Id = T4.User_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Review.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Review
        [CodeFirstDatabaseSchema.Review](T3.Review_Id, T3.Review_Stars, T3.Review_Comment, T3.[Review.User_Id])
    FROM (
        SELECT T1.Review_Id, T1.Review_Stars, T1.Review_Comment, T2.[Review.User_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Review_Id, 
                T.Stars AS Review_Stars, 
                T.Comment AS Review_Comment, 
                True AS _from0
            FROM DiemServiceDB.ReviewDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Review_User_Source).Id AS Review_Id, 
                Key(T.Review_User_Target).Id AS [Review.User_Id], 
                True AS _from1
            FROM DiemServiceDB.Review_User AS T) AS T2
            ON T1.Review_Id = T2.Review_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AdminRent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminRent
        [CodeFirstDatabaseSchema.AdminRent](T1.AdminRent_Id)
    FROM (
        SELECT 
            T.Id AS AdminRent_Id, 
            True AS _from0
        FROM DiemServiceDB.AdminRentDbSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RentACar.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACar
        [CodeFirstDatabaseSchema.RentACar](T5.RentACar_Id, T5.RentACar_Name, T5.RentACar_Logo, T5.[RentACar.Promo_description], T5.[RentACar.Average_Rating], T5.[RentACar.Address_Id], T5.[RentACar.Owner_Id], T5.[RentACar.AdminRent_Id])
    FROM (
        SELECT T1.RentACar_Id, T1.RentACar_Name, T1.RentACar_Logo, T1.[RentACar.Promo_description], T1.[RentACar.Average_Rating], T2.[RentACar.Address_Id], T4.[RentACar.Owner_Id], T3.[RentACar.AdminRent_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS RentACar_Id, 
                T.Name AS RentACar_Name, 
                T.Logo AS RentACar_Logo, 
                T.Promo_description AS [RentACar.Promo_description], 
                T.Average_Rating AS [RentACar.Average_Rating], 
                True AS _from0
            FROM DiemServiceDB.RentACarDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.RentACar_Address_Source).Id AS RentACar_Id, 
                Key(T.RentACar_Address_Target).Id AS [RentACar.Address_Id], 
                True AS _from1
            FROM DiemServiceDB.RentACar_Address AS T) AS T2
            ON T1.RentACar_Id = T2.RentACar_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AdminRent_OwnedRentServices_Target).Id AS RentACar_Id, 
                Key(T.AdminRent_OwnedRentServices_Source).Id AS [RentACar.AdminRent_Id], 
                True AS _from3
            FROM DiemServiceDB.AdminRent_OwnedRentServices AS T) AS T3
            ON T1.RentACar_Id = T3.RentACar_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.RentACar_Owner_Source).Id AS RentACar_Id, 
                Key(T.RentACar_Owner_Target).Id AS [RentACar.Owner_Id], 
                True AS _from2
            FROM DiemServiceDB.RentACar_Owner AS T) AS T4
            ON T1.RentACar_Id = T4.RentACar_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Vehicle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Vehicle
        [CodeFirstDatabaseSchema.Vehicle](T4.Vehicle_Id, T4.Vehicle_AverageRating, T4.Vehicle_Price, T4.Vehicle_Information, T4.[Vehicle.Location_Id], T4.[Vehicle.RentACar_Id])
    FROM (
        SELECT T1.Vehicle_Id, T1.Vehicle_AverageRating, T1.Vehicle_Price, T1.Vehicle_Information, T2.[Vehicle.Location_Id], T3.[Vehicle.RentACar_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Id AS Vehicle_Id, 
                T.AverageRating AS Vehicle_AverageRating, 
                T.Price AS Vehicle_Price, 
                T.Information AS Vehicle_Information, 
                True AS _from0
            FROM DiemServiceDB.VehicleDbSet AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Vehicle_Location_Source).Id AS Vehicle_Id, 
                Key(T.Vehicle_Location_Target).Id AS [Vehicle.Location_Id], 
                True AS _from1
            FROM DiemServiceDB.Vehicle_Location AS T) AS T2
            ON T1.Vehicle_Id = T2.Vehicle_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.RentACar_Vehicles_Target).Id AS Vehicle_Id, 
                Key(T.RentACar_Vehicles_Source).Id AS [Vehicle.RentACar_Id], 
                True AS _from2
            FROM DiemServiceDB.RentACar_Vehicles AS T) AS T3
            ON T1.Vehicle_Id = T3.Vehicle_Id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RegisteredUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RegisteredUser
        [CodeFirstDatabaseSchema.RegisteredUser](T1.RegisteredUser_Id)
    FROM (
        SELECT 
            T.Id AS RegisteredUser_Id, 
            True AS _from0
        FROM DiemServiceDB.RegisteredUserDbSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AddressDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AddressDbSet
        [DiemService.Database.Address](T1.Address_Id, T1.Address_State, T1.Address_City, T1.Address_Street, T1.[Address.Street_num], T1.[Address.Postal_code]) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.RentACarDbSet, ROW(T1.[RentACar_Holdings.RentACar_Holdings_Source.Id]),[DiemService.Database.RentACar]),[DiemService.Database.RentACar_Holdings],RentACar_Holdings_Target,RentACar_Holdings_Source) 
    FROM (
        SELECT 
            T.Id AS Address_Id, 
            T.State AS Address_State, 
            T.City AS Address_City, 
            T.Street AS Address_Street, 
            T.Street_num AS [Address.Street_num], 
            T.Postal_code AS [Address.Postal_code], 
            True AS _from0, 
            T.RentACar_Id AS [RentACar_Holdings.RentACar_Holdings_Source.Id]
        FROM CodeFirstDatabase.Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RentACar_Holdings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACar_Holdings
        [DiemService.Database.RentACar_Holdings](T3.[RentACar_Holdings.RentACar_Holdings_Source], T3.[RentACar_Holdings.RentACar_Holdings_Target])
    FROM (
        SELECT -- Constructing RentACar_Holdings_Source
            CreateRef(DiemServiceDB.RentACarDbSet, row(T2.[RentACar_Holdings.RentACar_Holdings_Source.Id]), [DiemService.Database.RentACar]) AS [RentACar_Holdings.RentACar_Holdings_Source], 
            T2.[RentACar_Holdings.RentACar_Holdings_Target]
        FROM (
            SELECT -- Constructing RentACar_Holdings_Target
                T1.[RentACar_Holdings.RentACar_Holdings_Source.Id], 
                CreateRef(DiemServiceDB.AddressDbSet, row(T1.[RentACar_Holdings.RentACar_Holdings_Target.Id]), [DiemService.Database.Address]) AS [RentACar_Holdings.RentACar_Holdings_Target]
            FROM (
                SELECT 
                    T.RentACar_Id AS [RentACar_Holdings.RentACar_Holdings_Source.Id], 
                    T.Id AS [RentACar_Holdings.RentACar_Holdings_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Address AS T
                WHERE T.RentACar_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AdminAvioDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminAvioDbSet
        [DiemService.Database.AdminAvio](T1.AdminAvio_Id)
    FROM (
        SELECT 
            T.Id AS AdminAvio_Id, 
            True AS _from0
        FROM CodeFirstDatabase.AdminAvio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AvioCompanyDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvioCompanyDbSet
        [DiemService.Database.AvioCompany](T1.AvioCompany_Id, T1.AvioCompany_Name, T1.[AvioCompany.Promo_description], T1.[AvioCompany.Average_Rating], T1.AvioCompany_Logo) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AddressDbSet, ROW(T1.[AvioCompany_Address.AvioCompany_Address_Target.Id]),[DiemService.Database.Address]),[DiemService.Database.AvioCompany_Address],AvioCompany_Address_Source,AvioCompany_Address_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[AvioCompany_Owner.AvioCompany_Owner_Target.Id]),[DiemService.Database.User]),[DiemService.Database.AvioCompany_Owner],AvioCompany_Owner_Source,AvioCompany_Owner_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AdminAvioDbSet, ROW(T1.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source.Id]),[DiemService.Database.AdminAvio]),[DiemService.Database.AdminAvio_OwnedAvioCompanies],AdminAvio_OwnedAvioCompanies_Target,AdminAvio_OwnedAvioCompanies_Source) 
    FROM (
        SELECT 
            T.Id AS AvioCompany_Id, 
            T.Name AS AvioCompany_Name, 
            T.Promo_description AS [AvioCompany.Promo_description], 
            T.Average_Rating AS [AvioCompany.Average_Rating], 
            T.Logo AS AvioCompany_Logo, 
            True AS _from0, 
            T.Address_Id AS [AvioCompany_Address.AvioCompany_Address_Target.Id], 
            T.Owner_Id AS [AvioCompany_Owner.AvioCompany_Owner_Target.Id], 
            T.AdminAvio_Id AS [AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source.Id]
        FROM CodeFirstDatabase.AvioCompany AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AvioCompany_Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvioCompany_Address
        [DiemService.Database.AvioCompany_Address](T3.[AvioCompany_Address.AvioCompany_Address_Source], T3.[AvioCompany_Address.AvioCompany_Address_Target])
    FROM (
        SELECT -- Constructing AvioCompany_Address_Source
            CreateRef(DiemServiceDB.AvioCompanyDbSet, row(T2.[AvioCompany_Address.AvioCompany_Address_Source.Id]), [DiemService.Database.AvioCompany]) AS [AvioCompany_Address.AvioCompany_Address_Source], 
            T2.[AvioCompany_Address.AvioCompany_Address_Target]
        FROM (
            SELECT -- Constructing AvioCompany_Address_Target
                T1.[AvioCompany_Address.AvioCompany_Address_Source.Id], 
                CreateRef(DiemServiceDB.AddressDbSet, row(T1.[AvioCompany_Address.AvioCompany_Address_Target.Id]), [DiemService.Database.Address]) AS [AvioCompany_Address.AvioCompany_Address_Target]
            FROM (
                SELECT 
                    T.Id AS [AvioCompany_Address.AvioCompany_Address_Source.Id], 
                    T.Address_Id AS [AvioCompany_Address.AvioCompany_Address_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.AvioCompany AS T
                WHERE T.Address_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AvioCompany_Owner.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvioCompany_Owner
        [DiemService.Database.AvioCompany_Owner](T3.[AvioCompany_Owner.AvioCompany_Owner_Source], T3.[AvioCompany_Owner.AvioCompany_Owner_Target])
    FROM (
        SELECT -- Constructing AvioCompany_Owner_Source
            CreateRef(DiemServiceDB.AvioCompanyDbSet, row(T2.[AvioCompany_Owner.AvioCompany_Owner_Source.Id]), [DiemService.Database.AvioCompany]) AS [AvioCompany_Owner.AvioCompany_Owner_Source], 
            T2.[AvioCompany_Owner.AvioCompany_Owner_Target]
        FROM (
            SELECT -- Constructing AvioCompany_Owner_Target
                T1.[AvioCompany_Owner.AvioCompany_Owner_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[AvioCompany_Owner.AvioCompany_Owner_Target.Id]), [DiemService.Database.User]) AS [AvioCompany_Owner.AvioCompany_Owner_Target]
            FROM (
                SELECT 
                    T.Id AS [AvioCompany_Owner.AvioCompany_Owner_Source.Id], 
                    T.Owner_Id AS [AvioCompany_Owner.AvioCompany_Owner_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.AvioCompany AS T
                WHERE T.Owner_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AdminAvio_OwnedAvioCompanies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminAvio_OwnedAvioCompanies
        [DiemService.Database.AdminAvio_OwnedAvioCompanies](T3.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source], T3.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Target])
    FROM (
        SELECT -- Constructing AdminAvio_OwnedAvioCompanies_Source
            CreateRef(DiemServiceDB.AdminAvioDbSet, row(T2.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source.Id]), [DiemService.Database.AdminAvio]) AS [AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source], 
            T2.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Target]
        FROM (
            SELECT -- Constructing AdminAvio_OwnedAvioCompanies_Target
                T1.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source.Id], 
                CreateRef(DiemServiceDB.AvioCompanyDbSet, row(T1.[AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Target.Id]), [DiemService.Database.AvioCompany]) AS [AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Target]
            FROM (
                SELECT 
                    T.AdminAvio_Id AS [AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Source.Id], 
                    T.Id AS [AdminAvio_OwnedAvioCompanies.AdminAvio_OwnedAvioCompanies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.AvioCompany AS T
                WHERE T.AdminAvio_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.LocationDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocationDbSet
        [DiemService.Database.Location](T1.Location_Id, T1.Location_State, T1.Location_City) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AvioCompanyDbSet, ROW(T1.[AvioCompany_Destinations.AvioCompany_Destinations_Source.Id]),[DiemService.Database.AvioCompany]),[DiemService.Database.AvioCompany_Destinations],AvioCompany_Destinations_Target,AvioCompany_Destinations_Source) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.FlightDbSet, ROW(T1.[Flight_Transits.Flight_Transits_Source.Id]),[DiemService.Database.Flight]),[DiemService.Database.Flight_Transits],Flight_Transits_Target,Flight_Transits_Source) 
    FROM (
        SELECT 
            T.Id AS Location_Id, 
            T.State AS Location_State, 
            T.City AS Location_City, 
            True AS _from0, 
            T.AvioCompany_Id AS [AvioCompany_Destinations.AvioCompany_Destinations_Source.Id], 
            T.Flight_Id AS [Flight_Transits.Flight_Transits_Source.Id]
        FROM CodeFirstDatabase.Location AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AvioCompany_Destinations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvioCompany_Destinations
        [DiemService.Database.AvioCompany_Destinations](T3.[AvioCompany_Destinations.AvioCompany_Destinations_Source], T3.[AvioCompany_Destinations.AvioCompany_Destinations_Target])
    FROM (
        SELECT -- Constructing AvioCompany_Destinations_Source
            CreateRef(DiemServiceDB.AvioCompanyDbSet, row(T2.[AvioCompany_Destinations.AvioCompany_Destinations_Source.Id]), [DiemService.Database.AvioCompany]) AS [AvioCompany_Destinations.AvioCompany_Destinations_Source], 
            T2.[AvioCompany_Destinations.AvioCompany_Destinations_Target]
        FROM (
            SELECT -- Constructing AvioCompany_Destinations_Target
                T1.[AvioCompany_Destinations.AvioCompany_Destinations_Source.Id], 
                CreateRef(DiemServiceDB.LocationDbSet, row(T1.[AvioCompany_Destinations.AvioCompany_Destinations_Target.Id]), [DiemService.Database.Location]) AS [AvioCompany_Destinations.AvioCompany_Destinations_Target]
            FROM (
                SELECT 
                    T.AvioCompany_Id AS [AvioCompany_Destinations.AvioCompany_Destinations_Source.Id], 
                    T.Id AS [AvioCompany_Destinations.AvioCompany_Destinations_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Location AS T
                WHERE T.AvioCompany_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Flight_Transits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Flight_Transits
        [DiemService.Database.Flight_Transits](T3.[Flight_Transits.Flight_Transits_Source], T3.[Flight_Transits.Flight_Transits_Target])
    FROM (
        SELECT -- Constructing Flight_Transits_Source
            CreateRef(DiemServiceDB.FlightDbSet, row(T2.[Flight_Transits.Flight_Transits_Source.Id]), [DiemService.Database.Flight]) AS [Flight_Transits.Flight_Transits_Source], 
            T2.[Flight_Transits.Flight_Transits_Target]
        FROM (
            SELECT -- Constructing Flight_Transits_Target
                T1.[Flight_Transits.Flight_Transits_Source.Id], 
                CreateRef(DiemServiceDB.LocationDbSet, row(T1.[Flight_Transits.Flight_Transits_Target.Id]), [DiemService.Database.Location]) AS [Flight_Transits.Flight_Transits_Target]
            FROM (
                SELECT 
                    T.Flight_Id AS [Flight_Transits.Flight_Transits_Source.Id], 
                    T.Id AS [Flight_Transits.Flight_Transits_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Location AS T
                WHERE T.Flight_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightDbSet
        [DiemService.Database.Flight](T2.Flight_Id, T2.Flight_Price, T2.[Flight.Flight_Departure_Time], T2.[Flight.Flight_Arrival_Time], T2.[Flight.Flight_Duration], T2.Flight_Seats, T2.[Flight.Flight_Distance], T2.Flight_FlightClass, T2.Flight_DiscountedPrice) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.LocationDbSet, ROW(T2.[Flight_From_Location.Flight_From_Location_Target.Id]),[DiemService.Database.Location]),[DiemService.Database.Flight_From_Location],Flight_From_Location_Source,Flight_From_Location_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AvioCompanyDbSet, ROW(T2.[Flight_Provider.Flight_Provider_Target.Id]),[DiemService.Database.AvioCompany]),[DiemService.Database.Flight_Provider],Flight_Provider_Source,Flight_Provider_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.LocationDbSet, ROW(T2.[Flight_To_Location.Flight_To_Location_Target.Id]),[DiemService.Database.Location]),[DiemService.Database.Flight_To_Location],Flight_To_Location_Source,Flight_To_Location_Target) 
    FROM (
        SELECT -- Constructing Price
            T1.Flight_Id, 
            [DiemService.Database.Price](T1.Flight_Price_Value, T1.Flight_Price_Currency) AS Flight_Price, 
            T1.[Flight.Flight_Departure_Time], 
            T1.[Flight.Flight_Arrival_Time], 
            T1.[Flight.Flight_Duration], 
            T1.Flight_Seats, 
            T1.[Flight.Flight_Distance], 
            T1.Flight_FlightClass, 
            T1.Flight_DiscountedPrice, 
            T1.[Flight_From_Location.Flight_From_Location_Target.Id], 
            T1.[Flight_Provider.Flight_Provider_Target.Id], 
            T1.[Flight_To_Location.Flight_To_Location_Target.Id]
        FROM (
            SELECT 
                T.Id AS Flight_Id, 
                T.Price_Value AS Flight_Price_Value, 
                CAST(T.Price_Currency AS [DiemService.Database.Currency]) AS Flight_Price_Currency, 
                T.Flight_Departure_Time AS [Flight.Flight_Departure_Time], 
                T.Flight_Arrival_Time AS [Flight.Flight_Arrival_Time], 
                T.Flight_Duration AS [Flight.Flight_Duration], 
                T.Seats AS Flight_Seats, 
                T.Flight_Distance AS [Flight.Flight_Distance], 
                CAST(T.FlightClass AS [DiemService.Database.FlightClass]) AS Flight_FlightClass, 
                T.DiscountedPrice AS Flight_DiscountedPrice, 
                True AS _from0, 
                T.From_Location_Id AS [Flight_From_Location.Flight_From_Location_Target.Id], 
                T.Provider_Id AS [Flight_Provider.Flight_Provider_Target.Id], 
                T.To_Location_Id AS [Flight_To_Location.Flight_To_Location_Target.Id]
            FROM CodeFirstDatabase.Flight AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Flight_From_Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Flight_From_Location
        [DiemService.Database.Flight_From_Location](T3.[Flight_From_Location.Flight_From_Location_Source], T3.[Flight_From_Location.Flight_From_Location_Target])
    FROM (
        SELECT -- Constructing Flight_From_Location_Source
            CreateRef(DiemServiceDB.FlightDbSet, row(T2.[Flight_From_Location.Flight_From_Location_Source.Id]), [DiemService.Database.Flight]) AS [Flight_From_Location.Flight_From_Location_Source], 
            T2.[Flight_From_Location.Flight_From_Location_Target]
        FROM (
            SELECT -- Constructing Flight_From_Location_Target
                T1.[Flight_From_Location.Flight_From_Location_Source.Id], 
                CreateRef(DiemServiceDB.LocationDbSet, row(T1.[Flight_From_Location.Flight_From_Location_Target.Id]), [DiemService.Database.Location]) AS [Flight_From_Location.Flight_From_Location_Target]
            FROM (
                SELECT 
                    T.Id AS [Flight_From_Location.Flight_From_Location_Source.Id], 
                    T.From_Location_Id AS [Flight_From_Location.Flight_From_Location_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Flight AS T
                WHERE T.From_Location_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Flight_Provider.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Flight_Provider
        [DiemService.Database.Flight_Provider](T3.[Flight_Provider.Flight_Provider_Source], T3.[Flight_Provider.Flight_Provider_Target])
    FROM (
        SELECT -- Constructing Flight_Provider_Source
            CreateRef(DiemServiceDB.FlightDbSet, row(T2.[Flight_Provider.Flight_Provider_Source.Id]), [DiemService.Database.Flight]) AS [Flight_Provider.Flight_Provider_Source], 
            T2.[Flight_Provider.Flight_Provider_Target]
        FROM (
            SELECT -- Constructing Flight_Provider_Target
                T1.[Flight_Provider.Flight_Provider_Source.Id], 
                CreateRef(DiemServiceDB.AvioCompanyDbSet, row(T1.[Flight_Provider.Flight_Provider_Target.Id]), [DiemService.Database.AvioCompany]) AS [Flight_Provider.Flight_Provider_Target]
            FROM (
                SELECT 
                    T.Id AS [Flight_Provider.Flight_Provider_Source.Id], 
                    T.Provider_Id AS [Flight_Provider.Flight_Provider_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Flight AS T
                WHERE T.Provider_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Flight_To_Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Flight_To_Location
        [DiemService.Database.Flight_To_Location](T3.[Flight_To_Location.Flight_To_Location_Source], T3.[Flight_To_Location.Flight_To_Location_Target])
    FROM (
        SELECT -- Constructing Flight_To_Location_Source
            CreateRef(DiemServiceDB.FlightDbSet, row(T2.[Flight_To_Location.Flight_To_Location_Source.Id]), [DiemService.Database.Flight]) AS [Flight_To_Location.Flight_To_Location_Source], 
            T2.[Flight_To_Location.Flight_To_Location_Target]
        FROM (
            SELECT -- Constructing Flight_To_Location_Target
                T1.[Flight_To_Location.Flight_To_Location_Source.Id], 
                CreateRef(DiemServiceDB.LocationDbSet, row(T1.[Flight_To_Location.Flight_To_Location_Target.Id]), [DiemService.Database.Location]) AS [Flight_To_Location.Flight_To_Location_Target]
            FROM (
                SELECT 
                    T.Id AS [Flight_To_Location.Flight_To_Location_Source.Id], 
                    T.To_Location_Id AS [Flight_To_Location.Flight_To_Location_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Flight AS T
                WHERE T.To_Location_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightReservationDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservationDbSet
        [DiemService.Database.FlightReservation](T1.FlightReservation_Id, T1.FlightReservation_Name, T1.FlightReservation_LastName, T1.[FlightReservation.Seat_Reserved], T1.[FlightReservation.Passport_Number], T1.FlightReservation_Cancelled) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.FlightDbSet, ROW(T1.[FlightReservation_Flight.FlightReservation_Flight_Target.Id]),[DiemService.Database.Flight]),[DiemService.Database.FlightReservation_Flight],FlightReservation_Flight_Source,FlightReservation_Flight_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[FlightReservation_Invited_By.FlightReservation_Invited_By_Target.Id]),[DiemService.Database.User]),[DiemService.Database.FlightReservation_Invited_By],FlightReservation_Invited_By_Source,FlightReservation_Invited_By_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.ReviewDbSet, ROW(T1.[FlightReservation_Review.FlightReservation_Review_Target.Id]),[DiemService.Database.Review]),[DiemService.Database.FlightReservation_Review],FlightReservation_Review_Source,FlightReservation_Review_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[FlightReservation_User.FlightReservation_User_Target.Id]),[DiemService.Database.User]),[DiemService.Database.FlightReservation_User],FlightReservation_User_Source,FlightReservation_User_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.RegisteredUserDbSet, ROW(T1.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source.Id]),[DiemService.Database.RegisteredUser]),[DiemService.Database.RegisteredUser_FlightReservations],RegisteredUser_FlightReservations_Target,RegisteredUser_FlightReservations_Source) 
    FROM (
        SELECT 
            T.Id AS FlightReservation_Id, 
            T.Name AS FlightReservation_Name, 
            T.LastName AS FlightReservation_LastName, 
            T.Seat_Reserved AS [FlightReservation.Seat_Reserved], 
            T.Passport_Number AS [FlightReservation.Passport_Number], 
            T.Cancelled AS FlightReservation_Cancelled, 
            True AS _from0, 
            T.Flight_Id AS [FlightReservation_Flight.FlightReservation_Flight_Target.Id], 
            T.Invited_By_Id AS [FlightReservation_Invited_By.FlightReservation_Invited_By_Target.Id], 
            T.Review_Id AS [FlightReservation_Review.FlightReservation_Review_Target.Id], 
            T.User_Id AS [FlightReservation_User.FlightReservation_User_Target.Id], 
            T.RegisteredUser_Id AS [RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source.Id]
        FROM CodeFirstDatabase.FlightReservation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightReservation_Flight.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservation_Flight
        [DiemService.Database.FlightReservation_Flight](T3.[FlightReservation_Flight.FlightReservation_Flight_Source], T3.[FlightReservation_Flight.FlightReservation_Flight_Target])
    FROM (
        SELECT -- Constructing FlightReservation_Flight_Source
            CreateRef(DiemServiceDB.FlightReservationDbSet, row(T2.[FlightReservation_Flight.FlightReservation_Flight_Source.Id]), [DiemService.Database.FlightReservation]) AS [FlightReservation_Flight.FlightReservation_Flight_Source], 
            T2.[FlightReservation_Flight.FlightReservation_Flight_Target]
        FROM (
            SELECT -- Constructing FlightReservation_Flight_Target
                T1.[FlightReservation_Flight.FlightReservation_Flight_Source.Id], 
                CreateRef(DiemServiceDB.FlightDbSet, row(T1.[FlightReservation_Flight.FlightReservation_Flight_Target.Id]), [DiemService.Database.Flight]) AS [FlightReservation_Flight.FlightReservation_Flight_Target]
            FROM (
                SELECT 
                    T.Id AS [FlightReservation_Flight.FlightReservation_Flight_Source.Id], 
                    T.Flight_Id AS [FlightReservation_Flight.FlightReservation_Flight_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.FlightReservation AS T
                WHERE T.Flight_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightReservation_Invited_By.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservation_Invited_By
        [DiemService.Database.FlightReservation_Invited_By](T3.[FlightReservation_Invited_By.FlightReservation_Invited_By_Source], T3.[FlightReservation_Invited_By.FlightReservation_Invited_By_Target])
    FROM (
        SELECT -- Constructing FlightReservation_Invited_By_Source
            CreateRef(DiemServiceDB.FlightReservationDbSet, row(T2.[FlightReservation_Invited_By.FlightReservation_Invited_By_Source.Id]), [DiemService.Database.FlightReservation]) AS [FlightReservation_Invited_By.FlightReservation_Invited_By_Source], 
            T2.[FlightReservation_Invited_By.FlightReservation_Invited_By_Target]
        FROM (
            SELECT -- Constructing FlightReservation_Invited_By_Target
                T1.[FlightReservation_Invited_By.FlightReservation_Invited_By_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[FlightReservation_Invited_By.FlightReservation_Invited_By_Target.Id]), [DiemService.Database.User]) AS [FlightReservation_Invited_By.FlightReservation_Invited_By_Target]
            FROM (
                SELECT 
                    T.Id AS [FlightReservation_Invited_By.FlightReservation_Invited_By_Source.Id], 
                    T.Invited_By_Id AS [FlightReservation_Invited_By.FlightReservation_Invited_By_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.FlightReservation AS T
                WHERE T.Invited_By_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightReservation_Review.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservation_Review
        [DiemService.Database.FlightReservation_Review](T3.[FlightReservation_Review.FlightReservation_Review_Source], T3.[FlightReservation_Review.FlightReservation_Review_Target])
    FROM (
        SELECT -- Constructing FlightReservation_Review_Source
            CreateRef(DiemServiceDB.FlightReservationDbSet, row(T2.[FlightReservation_Review.FlightReservation_Review_Source.Id]), [DiemService.Database.FlightReservation]) AS [FlightReservation_Review.FlightReservation_Review_Source], 
            T2.[FlightReservation_Review.FlightReservation_Review_Target]
        FROM (
            SELECT -- Constructing FlightReservation_Review_Target
                T1.[FlightReservation_Review.FlightReservation_Review_Source.Id], 
                CreateRef(DiemServiceDB.ReviewDbSet, row(T1.[FlightReservation_Review.FlightReservation_Review_Target.Id]), [DiemService.Database.Review]) AS [FlightReservation_Review.FlightReservation_Review_Target]
            FROM (
                SELECT 
                    T.Id AS [FlightReservation_Review.FlightReservation_Review_Source.Id], 
                    T.Review_Id AS [FlightReservation_Review.FlightReservation_Review_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.FlightReservation AS T
                WHERE T.Review_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.FlightReservation_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FlightReservation_User
        [DiemService.Database.FlightReservation_User](T3.[FlightReservation_User.FlightReservation_User_Source], T3.[FlightReservation_User.FlightReservation_User_Target])
    FROM (
        SELECT -- Constructing FlightReservation_User_Source
            CreateRef(DiemServiceDB.FlightReservationDbSet, row(T2.[FlightReservation_User.FlightReservation_User_Source.Id]), [DiemService.Database.FlightReservation]) AS [FlightReservation_User.FlightReservation_User_Source], 
            T2.[FlightReservation_User.FlightReservation_User_Target]
        FROM (
            SELECT -- Constructing FlightReservation_User_Target
                T1.[FlightReservation_User.FlightReservation_User_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[FlightReservation_User.FlightReservation_User_Target.Id]), [DiemService.Database.User]) AS [FlightReservation_User.FlightReservation_User_Target]
            FROM (
                SELECT 
                    T.Id AS [FlightReservation_User.FlightReservation_User_Source.Id], 
                    T.User_Id AS [FlightReservation_User.FlightReservation_User_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.FlightReservation AS T
                WHERE T.User_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RegisteredUser_FlightReservations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RegisteredUser_FlightReservations
        [DiemService.Database.RegisteredUser_FlightReservations](T3.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source], T3.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Target])
    FROM (
        SELECT -- Constructing RegisteredUser_FlightReservations_Source
            CreateRef(DiemServiceDB.RegisteredUserDbSet, row(T2.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source.Id]), [DiemService.Database.RegisteredUser]) AS [RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source], 
            T2.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Target]
        FROM (
            SELECT -- Constructing RegisteredUser_FlightReservations_Target
                T1.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source.Id], 
                CreateRef(DiemServiceDB.FlightReservationDbSet, row(T1.[RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Target.Id]), [DiemService.Database.FlightReservation]) AS [RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Target]
            FROM (
                SELECT 
                    T.RegisteredUser_Id AS [RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Source.Id], 
                    T.Id AS [RegisteredUser_FlightReservations.RegisteredUser_FlightReservations_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.FlightReservation AS T
                WHERE T.RegisteredUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.UserDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserDbSet
        [DiemService.Database.User](T1.User_Id, T1.User_Name, T1.User_LastName, T1.User_Username, T1.User_Hash, T1.User_Role, T1.User_UlogaID, T1.User_Email) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[User_FriendRequestsSent.User_FriendRequestsSent_Source.Id]),[DiemService.Database.User]),[DiemService.Database.User_FriendRequestsSent],User_FriendRequestsSent_Target,User_FriendRequestsSent_Source) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[User_Friends.User_Friends_Source.Id]),[DiemService.Database.User]),[DiemService.Database.User_Friends],User_Friends_Target,User_Friends_Source) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[User_PendingFriends.User_PendingFriends_Source.Id]),[DiemService.Database.User]),[DiemService.Database.User_PendingFriends],User_PendingFriends_Target,User_PendingFriends_Source) 
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Name AS User_Name, 
            T.LastName AS User_LastName, 
            T.Username AS User_Username, 
            T.Hash AS User_Hash, 
            CAST(T.Role AS [DiemService.Database.Role]) AS User_Role, 
            T.UlogaID AS User_UlogaID, 
            T.Email AS User_Email, 
            True AS _from0, 
            T.User_Id AS [User_FriendRequestsSent.User_FriendRequestsSent_Source.Id], 
            T.User_Id1 AS [User_Friends.User_Friends_Source.Id], 
            T.User_Id2 AS [User_PendingFriends.User_PendingFriends_Source.Id]
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.User_FriendRequestsSent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_FriendRequestsSent
        [DiemService.Database.User_FriendRequestsSent](T3.[User_FriendRequestsSent.User_FriendRequestsSent_Source], T3.[User_FriendRequestsSent.User_FriendRequestsSent_Target])
    FROM (
        SELECT -- Constructing User_FriendRequestsSent_Source
            CreateRef(DiemServiceDB.UserDbSet, row(T2.[User_FriendRequestsSent.User_FriendRequestsSent_Source.Id]), [DiemService.Database.User]) AS [User_FriendRequestsSent.User_FriendRequestsSent_Source], 
            T2.[User_FriendRequestsSent.User_FriendRequestsSent_Target]
        FROM (
            SELECT -- Constructing User_FriendRequestsSent_Target
                T1.[User_FriendRequestsSent.User_FriendRequestsSent_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[User_FriendRequestsSent.User_FriendRequestsSent_Target.Id]), [DiemService.Database.User]) AS [User_FriendRequestsSent.User_FriendRequestsSent_Target]
            FROM (
                SELECT 
                    T.User_Id AS [User_FriendRequestsSent.User_FriendRequestsSent_Source.Id], 
                    T.Id AS [User_FriendRequestsSent.User_FriendRequestsSent_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.User_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.User_Friends.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_Friends
        [DiemService.Database.User_Friends](T3.[User_Friends.User_Friends_Source], T3.[User_Friends.User_Friends_Target])
    FROM (
        SELECT -- Constructing User_Friends_Source
            CreateRef(DiemServiceDB.UserDbSet, row(T2.[User_Friends.User_Friends_Source.Id]), [DiemService.Database.User]) AS [User_Friends.User_Friends_Source], 
            T2.[User_Friends.User_Friends_Target]
        FROM (
            SELECT -- Constructing User_Friends_Target
                T1.[User_Friends.User_Friends_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[User_Friends.User_Friends_Target.Id]), [DiemService.Database.User]) AS [User_Friends.User_Friends_Target]
            FROM (
                SELECT 
                    T.User_Id1 AS [User_Friends.User_Friends_Source.Id], 
                    T.Id AS [User_Friends.User_Friends_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.User_Id1 IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.User_PendingFriends.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_PendingFriends
        [DiemService.Database.User_PendingFriends](T3.[User_PendingFriends.User_PendingFriends_Source], T3.[User_PendingFriends.User_PendingFriends_Target])
    FROM (
        SELECT -- Constructing User_PendingFriends_Source
            CreateRef(DiemServiceDB.UserDbSet, row(T2.[User_PendingFriends.User_PendingFriends_Source.Id]), [DiemService.Database.User]) AS [User_PendingFriends.User_PendingFriends_Source], 
            T2.[User_PendingFriends.User_PendingFriends_Target]
        FROM (
            SELECT -- Constructing User_PendingFriends_Target
                T1.[User_PendingFriends.User_PendingFriends_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[User_PendingFriends.User_PendingFriends_Target.Id]), [DiemService.Database.User]) AS [User_PendingFriends.User_PendingFriends_Target]
            FROM (
                SELECT 
                    T.User_Id2 AS [User_PendingFriends.User_PendingFriends_Source.Id], 
                    T.Id AS [User_PendingFriends.User_PendingFriends_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.User_Id2 IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.ReviewDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ReviewDbSet
        [DiemService.Database.Review](T1.Review_Id, T1.Review_Stars, T1.Review_Comment) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[Review_User.Review_User_Target.Id]),[DiemService.Database.User]),[DiemService.Database.Review_User],Review_User_Source,Review_User_Target) 
    FROM (
        SELECT 
            T.Id AS Review_Id, 
            T.Stars AS Review_Stars, 
            T.Comment AS Review_Comment, 
            True AS _from0, 
            T.User_Id AS [Review_User.Review_User_Target.Id]
        FROM CodeFirstDatabase.Review AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Review_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Review_User
        [DiemService.Database.Review_User](T3.[Review_User.Review_User_Source], T3.[Review_User.Review_User_Target])
    FROM (
        SELECT -- Constructing Review_User_Source
            CreateRef(DiemServiceDB.ReviewDbSet, row(T2.[Review_User.Review_User_Source.Id]), [DiemService.Database.Review]) AS [Review_User.Review_User_Source], 
            T2.[Review_User.Review_User_Target]
        FROM (
            SELECT -- Constructing Review_User_Target
                T1.[Review_User.Review_User_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[Review_User.Review_User_Target.Id]), [DiemService.Database.User]) AS [Review_User.Review_User_Target]
            FROM (
                SELECT 
                    T.Id AS [Review_User.Review_User_Source.Id], 
                    T.User_Id AS [Review_User.Review_User_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Review AS T
                WHERE T.User_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AdminRentDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminRentDbSet
        [DiemService.Database.AdminRent](T1.AdminRent_Id)
    FROM (
        SELECT 
            T.Id AS AdminRent_Id, 
            True AS _from0
        FROM CodeFirstDatabase.AdminRent AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RentACarDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACarDbSet
        [DiemService.Database.RentACar](T1.RentACar_Id, T1.RentACar_Name, T1.RentACar_Logo, T1.[RentACar.Promo_description], T1.[RentACar.Average_Rating]) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AddressDbSet, ROW(T1.[RentACar_Address.RentACar_Address_Target.Id]),[DiemService.Database.Address]),[DiemService.Database.RentACar_Address],RentACar_Address_Source,RentACar_Address_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.UserDbSet, ROW(T1.[RentACar_Owner.RentACar_Owner_Target.Id]),[DiemService.Database.User]),[DiemService.Database.RentACar_Owner],RentACar_Owner_Source,RentACar_Owner_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.AdminRentDbSet, ROW(T1.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source.Id]),[DiemService.Database.AdminRent]),[DiemService.Database.AdminRent_OwnedRentServices],AdminRent_OwnedRentServices_Target,AdminRent_OwnedRentServices_Source) 
    FROM (
        SELECT 
            T.Id AS RentACar_Id, 
            T.Name AS RentACar_Name, 
            T.Logo AS RentACar_Logo, 
            T.Promo_description AS [RentACar.Promo_description], 
            T.Average_Rating AS [RentACar.Average_Rating], 
            True AS _from0, 
            T.Address_Id AS [RentACar_Address.RentACar_Address_Target.Id], 
            T.Owner_Id AS [RentACar_Owner.RentACar_Owner_Target.Id], 
            T.AdminRent_Id AS [AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source.Id]
        FROM CodeFirstDatabase.RentACar AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RentACar_Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACar_Address
        [DiemService.Database.RentACar_Address](T3.[RentACar_Address.RentACar_Address_Source], T3.[RentACar_Address.RentACar_Address_Target])
    FROM (
        SELECT -- Constructing RentACar_Address_Source
            CreateRef(DiemServiceDB.RentACarDbSet, row(T2.[RentACar_Address.RentACar_Address_Source.Id]), [DiemService.Database.RentACar]) AS [RentACar_Address.RentACar_Address_Source], 
            T2.[RentACar_Address.RentACar_Address_Target]
        FROM (
            SELECT -- Constructing RentACar_Address_Target
                T1.[RentACar_Address.RentACar_Address_Source.Id], 
                CreateRef(DiemServiceDB.AddressDbSet, row(T1.[RentACar_Address.RentACar_Address_Target.Id]), [DiemService.Database.Address]) AS [RentACar_Address.RentACar_Address_Target]
            FROM (
                SELECT 
                    T.Id AS [RentACar_Address.RentACar_Address_Source.Id], 
                    T.Address_Id AS [RentACar_Address.RentACar_Address_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.RentACar AS T
                WHERE T.Address_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RentACar_Owner.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACar_Owner
        [DiemService.Database.RentACar_Owner](T3.[RentACar_Owner.RentACar_Owner_Source], T3.[RentACar_Owner.RentACar_Owner_Target])
    FROM (
        SELECT -- Constructing RentACar_Owner_Source
            CreateRef(DiemServiceDB.RentACarDbSet, row(T2.[RentACar_Owner.RentACar_Owner_Source.Id]), [DiemService.Database.RentACar]) AS [RentACar_Owner.RentACar_Owner_Source], 
            T2.[RentACar_Owner.RentACar_Owner_Target]
        FROM (
            SELECT -- Constructing RentACar_Owner_Target
                T1.[RentACar_Owner.RentACar_Owner_Source.Id], 
                CreateRef(DiemServiceDB.UserDbSet, row(T1.[RentACar_Owner.RentACar_Owner_Target.Id]), [DiemService.Database.User]) AS [RentACar_Owner.RentACar_Owner_Target]
            FROM (
                SELECT 
                    T.Id AS [RentACar_Owner.RentACar_Owner_Source.Id], 
                    T.Owner_Id AS [RentACar_Owner.RentACar_Owner_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.RentACar AS T
                WHERE T.Owner_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AdminRent_OwnedRentServices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminRent_OwnedRentServices
        [DiemService.Database.AdminRent_OwnedRentServices](T3.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source], T3.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Target])
    FROM (
        SELECT -- Constructing AdminRent_OwnedRentServices_Source
            CreateRef(DiemServiceDB.AdminRentDbSet, row(T2.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source.Id]), [DiemService.Database.AdminRent]) AS [AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source], 
            T2.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Target]
        FROM (
            SELECT -- Constructing AdminRent_OwnedRentServices_Target
                T1.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source.Id], 
                CreateRef(DiemServiceDB.RentACarDbSet, row(T1.[AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Target.Id]), [DiemService.Database.RentACar]) AS [AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Target]
            FROM (
                SELECT 
                    T.AdminRent_Id AS [AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Source.Id], 
                    T.Id AS [AdminRent_OwnedRentServices.AdminRent_OwnedRentServices_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.RentACar AS T
                WHERE T.AdminRent_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.VehicleDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VehicleDbSet
        [DiemService.Database.Vehicle](T1.Vehicle_Id, T1.Vehicle_AverageRating, T1.Vehicle_Price, T1.Vehicle_Information) WITH 
        RELATIONSHIP(CREATEREF(DiemServiceDB.LocationDbSet, ROW(T1.[Vehicle_Location.Vehicle_Location_Target.Id]),[DiemService.Database.Location]),[DiemService.Database.Vehicle_Location],Vehicle_Location_Source,Vehicle_Location_Target) 
        RELATIONSHIP(CREATEREF(DiemServiceDB.RentACarDbSet, ROW(T1.[RentACar_Vehicles.RentACar_Vehicles_Source.Id]),[DiemService.Database.RentACar]),[DiemService.Database.RentACar_Vehicles],RentACar_Vehicles_Target,RentACar_Vehicles_Source) 
    FROM (
        SELECT 
            T.Id AS Vehicle_Id, 
            T.AverageRating AS Vehicle_AverageRating, 
            T.Price AS Vehicle_Price, 
            T.Information AS Vehicle_Information, 
            True AS _from0, 
            T.Location_Id AS [Vehicle_Location.Vehicle_Location_Target.Id], 
            T.RentACar_Id AS [RentACar_Vehicles.RentACar_Vehicles_Source.Id]
        FROM CodeFirstDatabase.Vehicle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.Vehicle_Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Vehicle_Location
        [DiemService.Database.Vehicle_Location](T3.[Vehicle_Location.Vehicle_Location_Source], T3.[Vehicle_Location.Vehicle_Location_Target])
    FROM (
        SELECT -- Constructing Vehicle_Location_Source
            CreateRef(DiemServiceDB.VehicleDbSet, row(T2.[Vehicle_Location.Vehicle_Location_Source.Id]), [DiemService.Database.Vehicle]) AS [Vehicle_Location.Vehicle_Location_Source], 
            T2.[Vehicle_Location.Vehicle_Location_Target]
        FROM (
            SELECT -- Constructing Vehicle_Location_Target
                T1.[Vehicle_Location.Vehicle_Location_Source.Id], 
                CreateRef(DiemServiceDB.LocationDbSet, row(T1.[Vehicle_Location.Vehicle_Location_Target.Id]), [DiemService.Database.Location]) AS [Vehicle_Location.Vehicle_Location_Target]
            FROM (
                SELECT 
                    T.Id AS [Vehicle_Location.Vehicle_Location_Source.Id], 
                    T.Location_Id AS [Vehicle_Location.Vehicle_Location_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Vehicle AS T
                WHERE T.Location_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RentACar_Vehicles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RentACar_Vehicles
        [DiemService.Database.RentACar_Vehicles](T3.[RentACar_Vehicles.RentACar_Vehicles_Source], T3.[RentACar_Vehicles.RentACar_Vehicles_Target])
    FROM (
        SELECT -- Constructing RentACar_Vehicles_Source
            CreateRef(DiemServiceDB.RentACarDbSet, row(T2.[RentACar_Vehicles.RentACar_Vehicles_Source.Id]), [DiemService.Database.RentACar]) AS [RentACar_Vehicles.RentACar_Vehicles_Source], 
            T2.[RentACar_Vehicles.RentACar_Vehicles_Target]
        FROM (
            SELECT -- Constructing RentACar_Vehicles_Target
                T1.[RentACar_Vehicles.RentACar_Vehicles_Source.Id], 
                CreateRef(DiemServiceDB.VehicleDbSet, row(T1.[RentACar_Vehicles.RentACar_Vehicles_Target.Id]), [DiemService.Database.Vehicle]) AS [RentACar_Vehicles.RentACar_Vehicles_Target]
            FROM (
                SELECT 
                    T.RentACar_Id AS [RentACar_Vehicles.RentACar_Vehicles_Source.Id], 
                    T.Id AS [RentACar_Vehicles.RentACar_Vehicles_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Vehicle AS T
                WHERE T.RentACar_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.RegisteredUserDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RegisteredUserDbSet
        [DiemService.Database.RegisteredUser](T1.RegisteredUser_Id)
    FROM (
        SELECT 
            T.Id AS RegisteredUser_Id, 
            True AS _from0
        FROM CodeFirstDatabase.RegisteredUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Admin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Admin
        [CodeFirstDatabaseSchema.Admin](T1.Admin_Id)
    FROM (
        SELECT 
            T.Id AS Admin_Id, 
            True AS _from0
        FROM DiemServiceDB.AdminDbSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.AdminDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AdminDbSet
        [DiemService.Database.Admin](T1.Admin_Id)
    FROM (
        SELECT 
            T.Id AS Admin_Id, 
            True AS _from0
        FROM CodeFirstDatabase.Admin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TempUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TempUser
        [CodeFirstDatabaseSchema.TempUser](T1.TempUser_Id, T1.TempUser_ActivationLink, T1.TempUser_ExpiryDate, T1.TempUser_Username, T1.TempUser_Name, T1.TempUser_LastName, T1.TempUser_Pass, T1.TempUser_Email, T1.TempUser_PhoneNumber)
    FROM (
        SELECT 
            T.Id AS TempUser_Id, 
            T.ActivationLink AS TempUser_ActivationLink, 
            T.ExpiryDate AS TempUser_ExpiryDate, 
            T.Username AS TempUser_Username, 
            T.Name AS TempUser_Name, 
            T.LastName AS TempUser_LastName, 
            T.Pass AS TempUser_Pass, 
            T.Email AS TempUser_Email, 
            T.PhoneNumber AS TempUser_PhoneNumber, 
            True AS _from0
        FROM DiemServiceDB.TempUserDbSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DiemServiceDB.TempUserDbSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TempUserDbSet
        [DiemService.Database.TempUser](T1.TempUser_Id, T1.TempUser_ActivationLink, T1.TempUser_ExpiryDate, T1.TempUser_Username, T1.TempUser_Name, T1.TempUser_LastName, T1.TempUser_Pass, T1.TempUser_Email, T1.TempUser_PhoneNumber)
    FROM (
        SELECT 
            T.Id AS TempUser_Id, 
            T.ActivationLink AS TempUser_ActivationLink, 
            T.ExpiryDate AS TempUser_ExpiryDate, 
            T.Username AS TempUser_Username, 
            T.Name AS TempUser_Name, 
            T.LastName AS TempUser_LastName, 
            T.Pass AS TempUser_Pass, 
            T.Email AS TempUser_Email, 
            T.PhoneNumber AS TempUser_PhoneNumber, 
            True AS _from0
        FROM CodeFirstDatabase.TempUser AS T
    ) AS T1");
        }
    }
}
